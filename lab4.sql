use univers;
/*1*/
SELECT AUDITORIUM.AUDITORIUM, AUDITORIUM_TYPE.AUDITORIUM_TYPENAME
FROM AUDITORIUM INNER JOIN AUDITORIUM_TYPE 
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE


/*2*/
SELECT AUDITORIUM.AUDITORIUM, AUDITORIUM_TYPE.AUDITORIUM_TYPENAME
FROM AUDITORIUM INNER JOIN AUDITORIUM_TYPE
ON AUDITORIUM.AUDITORIUM_TYPE = AUDITORIUM_TYPE.AUDITORIUM_TYPE AND AUDITORIUM_TYPE.AUDITORIUM_TYPENAME LIKE '%компьютер%';

/*3*/
SELECT FACULTY.FACULTY_NAME, PULPIT.PULPIT_NAME, GROUPS.PROFESSION, SUBJECT.SUBJECT_NAME, STUDENT.NAME, 
CASE 
WHEN PROGRESS.NOTE = 6 THEN '6'
WHEN PROGRESS.NOTE = 7 THEN '7'
WHEN PROGRESS.NOTE = 8 THEN '8'
END
FROM PROGRESS INNER JOIN STUDENT 
ON PROGRESS.IDSTUDENT = STUDENT.IDSTUDENT INNER JOIN GROUPS 
ON STUDENT.IDGROUP = GROUPS.IDGROUP INNER JOIN SUBJECT 
ON PROGRESS.SUBJECT = SUBJECT.SUBJECT INNER JOIN PULPIT 
ON SUBJECT.PULPIT = PULPIT.PULPIT INNER JOIN FACULTY 
ON PULPIT.FACULTY = FACULTY.FACULTY
WHERE  PROGRESS.NOTE BETWEEN 6 AND 8
ORDER BY PROGRESS.NOTE DESC;



/*4*/
SELECT PULPIT.PULPIT_NAME,
    ISNULL(TEACHER.TEACHER_NAME, '***')
FROM  PULPIT LEFT OUTER JOIN TEACHER 
ON PULPIT.PULPIT = TEACHER.PULPIT;



/*5*/
CREATE TABLE TableA (
    ID INT PRIMARY KEY,
    Name NVARCHAR(50)
);
CREATE TABLE TableB (
    ID INT PRIMARY KEY,
    Description NVARCHAR(50)
);
INSERT INTO TableA (ID, Name) 
VALUES (1, 'Alice'),
(2, 'Bob'), 
(3, 'Charlie');
INSERT INTO TableB (ID, Description) 
VALUES (2, 'Manager'),
(3, 'Developer'),
(4, 'Designer');
SELECT TableA.ID, TableA.Name
FROM TableA FULL OUTER JOIN TableB ON TableA.ID = TableB.ID WHERE TableB.ID IS NULL;
SELECT TableB.ID, TableB.Description
FROM TableA FULL OUTER JOIN TableB ON TableA.ID = TableB.ID WHERE TableA.ID IS NULL;
SELECT TableA.ID, TableA.Name, TableB.ID, TableB.Description
FROM  TableA FULL OUTER JOIN TableB 
ON TableA.ID = TableB.ID
WHERE TableA.ID IS NOT NULL OR TableB.ID IS NOT NULL;
  /*6*/
SELECT AUDITORIUM.AUDITORIUM, AUDITORIUM_TYPE.AUDITORIUM_TYPENAME
FROM AUDITORIUM CROSS JOIN AUDITORIUM_TYPE;